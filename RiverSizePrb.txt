matrix = [
  [1, 0, 0, 1, 0],
  [1, 0, 1, 0, 0],
  [0, 0, 1, 0, 1],
  [1, 0, 1, 0, 1],
  [1, 0, 1, 1, 0],
]
def riverSize(matrix):
    final=[]
    visited=[[False for i in row]for row in matrix]
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if visited[i][j]==True:
                continue
            traverseNode(i,j,matrix,visited,final)
    return final

def traverseNode(i,j,matrix,visited,final):
    count=0
    nodesToExplore=[[i,j]]
    while len(nodesToExplore)!=0:
        current=nodesToExplore.pop()
        i=current[0]
        j=current[1]
        if visited[i][j]==True:
            continue
        if matrix[i][j]==0:
            continue
        count+=1
        visited[i][j]=True
        unvisitedNeighbor=getUnvisitedNeighbor(i,j,matrix,visited)
        for neighbor in unvisitedNeighbor:
            nodesToExplore.append(neighbor)
    if count>0:
        final.append(count)


def getUnvisitedNeighbor(i,j,matrix,visited):
    unvisited=[]
    if i>0 and not visited[i-1][j]:
        unvisited.append([i-1,j])
    if i<len(matrix)-1 and not visited[i+1][j]:
        unvisited.append([i+1,j])
    if j>0 and not visited[i][j-1]:
        unvisited.append([i,j-1])
    if j<len(matrix[0])-1 and not visited[i][j+1]:
        unvisited.append([i,j+1])
    return unvisited

print(riverSize(matrix))